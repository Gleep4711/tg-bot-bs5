# from asyncio import sleep
from textwrap import dedent
# import re
# from random import randint

from aiogram import Router
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

# from bot.const import START_POINTS, STICKER_FAIL, SPIN_TEXT, THROTTLE_TIME_SPIN
# from bot.dice_check import get_combo_data
from bot.keyboards import get_debug_keyboard, get_startsee_keyboard, get_home_keyboard
from bot.sql import users, connect
from bot.utilits import debug, log
from bot.const import START_WEAPON, START_ESCAPE, START_PARROT, \
                    STARTSEE_SEE, STARTSEE_ESCAPE, FISHERMAN, CAVE, \
                    STORAGE, DOCK, HOUSE, SHIPYARD, GROVE

flags = {"throttling_key": "default"}
router = Router()

@router.message(Text(text=[START_WEAPON, START_ESCAPE, START_PARROT]), flags=flags)
async def startcommand(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user = user_data.get('user')
    if user['state'] != 'start': return await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')

    answer_text = ''
    if message.text == START_WEAPON:
        answer_text = '''\
        –î–æ—Å—Ç–∞–≤ —Å–≤–æ—é —Å–∞–±–ª—é —Ç—ã –≤—Å—Ç—É–ø–∞–µ—à—å –≤ –Ω–µ—Ä–∞–≤–Ω—É—é —Å—Ö–≤–∞—Ç–∫—É —Å —Ç—É–º–∞–Ω–æ–º. –¢—ã –ø—Ä–æ–Ω–∑–∞–µ—à—å –Ω–∞—Å–∫–≤–æ–∑—å –≤—ã—Ö–æ–¥—è—â–µ–≥–æ –∏–∑ —Ç—É–º–∞–Ω–∞ üíÄ —Å–∫–µ–ª–µ—Ç–∞ (?!) –∏ –æ–Ω –ø—Ä–æ–¥–µ–ª—ã–≤–∞–µ—Ç —Ç–∞–∫—É—é –∂–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å —Ç–æ–±–æ–π...
        '''
        # –í—ã –¥–æ—Å—Ç–∞—ë—Ç–µ —Å–≤–æ—é —Å–∞–±–ª—é –∏ –ø—Ä–æ–Ω–∑–∞–µ—Ç–µ –ø–µ—Ä–≤–æ–µ —á—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ç—É–º–∞–Ω–∞, –≤–∞—à–∞ —Å–∞–±–ª—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞—Å–∫–≤–æ–∑—å —Å–∫–µ–ª–µ—Ç–∞ –∏ —Å–∫–µ–ª–µ—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–∞–∫—É—é –∂–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å –≤–∞–º–∏...
        debug('{} –ø–æ–≥–∏–± —Å —á–µ—Å—Ç—å—é'.format(user['name']))
    elif message.text == START_ESCAPE:
        answer_text = '''\
        –í—ã —Å–±–µ–∂–∞–ª–∏ —Å üèù –æ—Å—Ç—Ä–æ–≤–∞. –ê, –Ω–µ—Ç, –ø–æ–∫–∞–∑–∞–ª–æ—Å—å, –∫–æ—Ä–æ–±–ª—å —É–∂–µ –Ω–∞ –¥–Ω–µ, –±–µ–∂–∞—Ç—å –Ω–µ–∫—É–¥–∞.
        '''
        debug('{} —Å–±–µ–∂–∞–ª'.format(user['name']))
    elif message.text == START_PARROT:
        answer_text = '''\
        –£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Ö–æ–ª–æ–¥–Ω–æ–µ ‚ù§Ô∏è —Å–µ—Ä–¥—Ü–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–µ—Å—Ç–∏ –≤ –∂–µ—Ä—Ç–≤—É —Å–≤–æ–µ–≥–æ –≤–µ—Ä–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞.
        '''
        debug('{} —É–±–∏–ª –ø–æ–ø—É–≥–∞—è'.format(user['name']))
    answer_text += '''\
        
        –í–∞—à–µ —Å–µ—Ä–¥—Ü–µ –ø—Ä–æ–Ω–∑–∞–µ—Ç —Ä–∂–∞–≤–∞—è —Å–∞–±–ª—è, –≤–∞—Å –æ–∫—É—Ç—ã–≤–∞–µ—Ç —á—ë—Ä–Ω—ã–π —Ç—É–º–∞–Ω, –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –∫–∞–∫ —É—Ö–æ–¥–∏—Ç –∂–∏–∑–Ω—å...
        
        –ü—Ä–æ—Ö–æ–¥–∏—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –≤—ã –ø–æ–Ω–∏–º–∞—Ç–µ —á—Ç–æ –≤—Å—ë –µ—â—ë —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –±–æ–ª—å –∏ –∫–∞–∂–µ—Ç—Å—è –≤—ã –∑–∞–±—ã–ª–∏ —á—Ç–æ-—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ–µ –∏–∑ —Å–≤–æ–µ–≥–æ –¥–µ—Ç—Å—Ç–≤–∞.
        –í—ã —Å —Ç—Ä—É–¥–æ–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ –≥–ª–∞–∑–∞, –∫–∞–∂–µ—Ç—Å—è –≤–∞—à–∏ –≥–ª–∞–∑–∞ –Ω–µ –æ—á–µ–Ω—å –ª—é–±—è—Ç —Å–æ–ª—ë–Ω—É—é –≤–æ–¥—É –∏ –ø–µ—Å–æ–∫...
        '''
    conn = connect()
    conn.execute(users.update().values(state='startsee').where(users.c.user_id==message.from_user.id))
    conn.close()
    user['state'] = 'startsee'
    await state.update_data(user=user)
    
    await message.answer(dedent(answer_text), reply_markup=get_startsee_keyboard())

@router.message(Text(text=STARTSEE_SEE), flags=flags)
async def start_see(message: Message, state: FSMContext):

    user_data = await state.get_data()
    user = user_data.get('user')
    if user['location'] != 'start': return await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')

    see_text = '''\
        –í—ã –æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ—Å—å –≤–æ–∫—Ä—É–≥:
        –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –º–∞–ª–µ–Ω—å–∫–æ–º üèù–æ—Å—Ç—Ä–æ–≤–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º–Ω–æ–≥–æ –ø–µ—Å–∫–∞ –∏ –ø–∞–ª—å–º,
        –Ω–∞ –±–µ—Ä–µ–≥—É –≤—ã –≤–∏–¥–∏—Ç–µ —Ä—ã–±–∞–∫–∞, —Ä—è–¥–æ–º —Å –Ω–∏–º –ø—Ä–∏—à—Ñ–∞—Ä—Ç–æ–≤–∞–Ω–∞ üõ∂–º–∞–ª–µ–Ω—å–∫–∞—è –ª–æ–¥–∫–∞,
        –∫–∞–∂–µ—Ç—Å—è —Ä—ã–±–∞–∫ —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç –±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å üç∫—Ä–æ–º–∞, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≥–ª—É–±–æ–∫–∞—è —ç—Ç–∞ —è–º–∞, –Ω–æ –≤—ã —Ü–µ–ª–∏–∫–æ–º —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –æ–Ω–∞ –¥–æ–≤–µ—Ä—Ö—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –±—É—Ç—ã–ª–∫–∞–º–∏ —Å üç∫üç∫üç∫—Ä–æ–º–æ–º,
        —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –≤—ã –≤—ã–¥–∏—Ç–µ —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ—Å—Ç—Ä–æ–π–∫–∏, –∫–∞–∂–µ—Ç—Å—è —Ç—É—Ç –±—ã–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –≤–µ—Ä—Ñ—å —Å –ø—Ä–∏—á–∞–ª–æ–º, –∏—Ö –ª–µ–≥–∫–æ –±—É–¥–µ—Ç ‚öí–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å,
        —Ä—è–¥–æ–º —Å –Ω–∏–º–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ üõñ–ª–∞—á—É–≥, –≤ –Ω–∏—Ö –µ—â—ë –º–æ–∂–Ω–æ –∂–∏—Ç—å, –Ω–æ —Å—É–¥—è –ø–æ –≤–Ω–µ—à–Ω–µ–º—É –≤–∏–¥—É –æ–Ω–∏ –¥–∞–≤–Ω–æ –ø—É—Å—Ç—É—é—Ç,
        –≤ —Ä–æ—â–µ –≤—ã –≤–∏–¥–∏—Ç–µ –º–Ω–æ–≥–æ üêµ–æ–±–µ–∑—å—è–Ω —Å ü¶ú–ø–æ–ø—É–≥–∞—è–º–∏ –∏ —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –≤—Ö–æ–¥ –≤ –ø–µ—â–µ—Ä—É.
    '''
    if user['state'] == 'startsee':
        keyboard = get_startsee_keyboard()
    else:
        keyboard = get_home_keyboard()
    await message.answer(dedent(see_text), reply_markup=keyboard)

@router.message(Text(text=STARTSEE_ESCAPE), flags=flags)
async def start_run(message: Message, state: FSMContext):

    user_data = await state.get_data()
    user = user_data.get('user')
    conn = connect()
    conn.execute(users.update().values(state='home', location='home').where(users.c.user_id==message.from_user.id))
    conn.close()
    user['state'] = 'home'
    await state.update_data(user=user)

    see_text = '''\
        –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –≥–¥–µ –≤—ã –∏ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç...
        –í—ã –±–µ–∂–∏—Ç–µ –∫ –ª–æ–¥–∫–µ —Ä—ã–±–∞–∫–∞, –æ—Ç–≤—è–∑—ã–≤–∞–µ—Ç–µ –µ—ë –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≥—Ä–µ–±—Å—Ç–∏ –ø—Ä–æ—á—å –æ—Ç —ç—Ç–æ–≥–æ –ø—Ä–æ–∫–ª—è—Ç–æ–≥–æ –æ—Å—Ç—Ä–æ–≤–∞. 
        –ß–µ—Ä–µ–∑ 20 –º–µ—Ç—Ä–æ–≤ –≤—ã –∑–∞–º–µ—á–∞—Ç–µ –ø–æ–¥ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å—é –≤–æ–¥—ã –æ—Å—Ç—Ä—ã–µ –∫–∞–º–Ω–∏, –Ω–æ —É–∂–µ —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ, –∫–∞–º–Ω–∏ –ø—Ä–æ—Ä–µ–∑–∞—é—Ç –ª–æ–¥–∫—É —Å–ª–æ–≤–Ω–æ –º–∞—Å–ª–æ, –∑–∞–±–∏—Ä–∞—è –Ω–∞ –¥–Ω–æ –ª–æ–¥–∫—É –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏.
        –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –∫–∞–∫ —á–µ—Ä–Ω—ã–π —Ç—É–º–∞–Ω –∏—Å—Ö–æ–¥–∏—Ç –ø—Ä—è–º–æ –∏–∑ –≤–∞—Å –∏ —Å–Ω–æ–≤–∞ —ç—Ç–∞ —É–∂–∞—Å–Ω–∞—è –±–æ–ª—å....
        
        –°–ø—É—Å—Ç—è –∫–∞–∫–æ–µ —Ç–æ –≤—Ä–µ–º—è, –≤—ã –ø–æ–Ω–∏–º–∞—Ç–µ —á—Ç–æ –ª–µ–∂–∏—Ç–µ –Ω–∞ –ø–µ—Å–∫–µ –∏ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–∑–∞, —Ç–æ –Ω–∏—á–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç–µ—Ä–ø–µ—Ç—å –±–æ–ª—å –Ω–µ—Ç —Å–º—ã—Å–ª–∞.
        –†—è–¥–æ–º —Å–ª—ã—à–Ω–æ —à–∞—Ä–∫–∞–Ω—å–µ –ø–æ –ø–µ—Å–∫—É, –æ—Ç–∫—Ä—ã–≤ –≥–ª–∞–∑–∞ –≤—ã –≤–∏–¥–∏—Ç–µ —Ä—ã–±–∞–∫–∞ –ø—Ä–æ—Ç—è–≥–∏–≤–∞—é—â–µ–≥–æ –≤–∞–º –±—É—Ç—ã–ª–∫—É —Ä–æ–º–∞.
            ‚Äî –ü–µ—Ä–≤—ã–π —Ä–∞–∑ —É–º–∏—Ä–∞–µ—à—å? 
            –í–æ—Ç, –¥–µ—Ä–∂–∏, —ç—Ç–æ —É—Ç–æ–ª–∏—Ç –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å. 
            –ë–æ–≥–∏ —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–∞—Å —Å—é–¥–∞, –Ω–µ –æ—Å—Ç–∞–≤—è—Ç –Ω–∞—Å –≤ –ø–æ–∫–æ–µ, –∏–º —á—Ç–æ-—Ç–æ –æ—Ç –Ω–∞—Å –Ω—É–∂–Ω–æ. 
            –° –∫–∞–∂–¥–æ–π —Å–º–µ—Ä—Ç—å—é —Ç—ã –±—É–¥–µ—à—å –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è –Ω–∞ —Å–≤–æ—ë–º –æ—Å—Ç—Ä–æ–≤–µ, –Ω–æ —Å –∫–∞–∂–¥—ã–º —Ä–∞–∑–æ–º –±—É–¥–µ—à—å –∑–∞–±—ã–≤–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, –æ —Ç–æ–º, –∫—Ç–æ —Ç—ã –µ—Å—Ç—å.
            –í–æ—Ç, –≤–æ–∑—å–º–∏ –µ—â—ë –∫–∞—Ä—Ç—É, –±–µ–∑ –Ω–µ—ë –∑–¥–µ—Å—å –Ω–∏–∫—É–¥–∞. –ù–∞ –∫–∞—Ä—Ç–µ –æ—Ç–º–µ—á–µ–Ω—ã –±–ª–∏–∂–∞–π—à–∏–µ –æ—Å—Ç—Ä–æ–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—É—Ç–∏ –¥–æ –Ω–∏—Ö.
    '''
    await message.answer(dedent(see_text), reply_markup=get_home_keyboard())

@router.message(Text(text=FISHERMAN), flags=flags)
async def fisherman(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user = user_data.get('user')
    if user['location'] != 'home': return await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
    fisherman_text = '''\
        –Ø –±–µ–∑ —Ç—Ä—É–¥–∞ –º–æ–≥—É –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä—ã–±–∞—Ü–∫—É—é –ª–æ–¥–∫—É, –±–ª–∞–≥–æ –¥–µ—Ä–µ–≤–∞ —Ç—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. 
        –û–¥–Ω–∞–∫–æ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∫–æ—Ä—ã—Ç–æ –ø–æ–ø—Ä–æ—á–Ω–µ–µ, —Ç–æ –ø—Ä–∏–¥—ë—Ç—å—Å—è –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä—Ñ—å.
        –Ø —Ö–æ—Ä–æ—à –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ, –Ω–æ —Å–∞–º –Ω–µ —Å–ø—Ä–∞–≤–ª—é—Å—å. –ü—Ä–∏–≤–µ–¥–∏ –º–Ω–µ –ø–∞—Ä—É —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.
        
        –ó–æ–ª–æ—Ç–∞ —É —Ç–µ–±—è –Ω–µ—Ç, –∞ –∞–±–æ—Ä–∏–≥–µ–Ω—ã –∑–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ —Å—Ç–∞–Ω—É—Ç.
        –í –ø–µ—â–µ—Ä–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–∞–∫–æ–π –Ω–∏–±—É–¥—å —Ä–∂–∞–≤—ã–π –º–µ—á, –∞ –≤ —Ä—ã–±–∞—Ü–∫–æ–π –≥–∞–≤–∞–Ω–∏ –µ—Å—Ç—å —Ä—ã–±–∞–∫–∏.
        –î—É–º–∞—é —Ç—ã —á—Ç–æ –Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞–µ—à—å.
        '''
    await message.answer(dedent(fisherman_text))

@router.message(Text(text=CAVE), flags=flags)
async def cave(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user = user_data.get('user')
    if user['location'] != 'home': return await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
    await message.answer('–ö—É–¥–∞ —Ç—ã —Å–æ–±—Ä–∞–ª—Å—è –≤ —Ç–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏? –ò–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –ø—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ.')

@router.message(Text(text=STORAGE), flags=flags)
async def cave(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user = user_data.get('user')
    if user['location'] != 'home': return await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
    storage_text = '–Ø–º–∞ –≤—ã–≥–ª—è–¥–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–ª—É–±–æ–∫–æ–π —á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç—å –≤ –Ω–µ—ë —Ü–µ–ª—ã–π –∫–æ—Ä–∞–±–ª—å, –Ω–æ –ø–æ–∫–∞ –æ–Ω–∞ –¥–æ–≤–µ—Ä—Ö—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ üç∫ —Ä–æ–º–æ–º. –í–∞–º –ø—Ä–∏–¥—ë—Ç—å—Å—è –æ–ø—É—Å—Ç–æ—à–∏—Ç—å —Å–æ—Ç–Ω—é - –¥—Ä—É–≥—É—é –±—É—Ç—ã–ª–æ–∫, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–ª–æ–∂–∏—Ç—å —Å—é–¥–∞ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ.'
    storage = '''\
        üç∫ –†–æ–º - ‚ôæ
        üí∞ –°–∞–º–æ–ª—ã - 0
        '''
        # –î–∏–Ω–∞—Ä, –º–∞–ª–æ—Ç, —Å–∞–º–æ–ª, –ª–æ—Ä–∏–∫
    await message.answer('{}\n\n–í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:\n{}'.format(storage_text, dedent(storage)))

@router.message(Text(text=DOCK), flags=flags)
async def cave(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user = user_data.get('user')
    if user['location'] != 'home': return await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
    await message.answer('–ö—É–¥–∞ —Ç—ã —Å–æ–±—Ä–∞–ª—Å—è –≤ —Ç–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏? –ò–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –ø—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ.')

@router.message(Text(text=HOUSE), flags=flags)
async def cave(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user = user_data.get('user')
    if user['location'] != 'home': return await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
    await message.answer('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')

@router.message(Text(text=SHIPYARD), flags=flags)
async def cave(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user = user_data.get('user')
    if user['location'] != 'home': return await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
    await message.answer('–¢—ã —Å–º–æ—Ç—Ä–∏—à—å –Ω–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—É—é –≤–µ—Ä—Ñ—å, —Å–∞–º —Ç—É—Ç –Ω–µ —Å–ø—Ä–∞–≤–∏—à—å—Å—è, –Ω–∞–¥–æ –ø–æ –º–µ–Ω—å—à–µ–π –º–µ—Ä–µ –µ—â—ë –¥–≤–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –¥–ª—è –µ—ë –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.')

@router.message(Text(text=GROVE), flags=flags)
async def cave(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user = user_data.get('user')
    if user['location'] != 'home': return await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
    await message.answer('üêµ –æ–±–µ–∑—å—è–Ω—ã –∑–∞–∫–∏–¥—ã–≤–∞—é—Ç —Ç–µ–±—è –∫–æ–∫–æ—Å–∞–º–∏ –Ω–µ –ø–æ–∑–≤–æ–ª—è—è –ø–æ–¥–æ–π—Ç–∏ –¥–∞–∂–µ –±–ª–∏–∑–∫–æ –∫ –ø–∞–ª—å–º–∞–º...')
